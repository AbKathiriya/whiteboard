{"version":3,"sources":["App.js","index.js"],"names":["canvas","context","current","color","stroke","opacity","drawing","App","useState","brush","setBrush","canvasRef","useRef","colorsRef","drawLine","x0","y0","x1","y1","beginPath","moveTo","lineTo","globalAlpha","strokeStyle","lineWidth","closePath","onMouseDown","e","x","clientX","touches","y","clientY","onMouseMove","onMouseUp","onResize","width","window","innerWidth","height","innerHeight","onColorUpdate","console","log","target","dataset","onBrushChange","onBrushSizeChange","stopPropagation","size","useEffect","getContext","addEventListener","callback","delay","previousCall","Date","getTime","time","apply","arguments","throttle","className","ref","data-color","onClick","data-brush","data-size","clearRect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db382c33.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nconst current = {\n  color: \"black\",\n  stroke: 1,\n  opacity: 1,\n};\nvar canvas;\nvar context;\nvar drawing = false;\n\nconst App = () => {\n  const [brush, setBrush] = useState(\"pen\");\n  const canvasRef = useRef(null);\n  const colorsRef = useRef(null);\n\n  const drawLine = (x0, y0, x1, y1) => {\n    context.beginPath();\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.globalAlpha = current.opacity;\n    context.strokeStyle = current.color;\n    context.lineWidth = current.stroke;\n    context.stroke();\n    context.closePath();\n  };\n\n  const onMouseDown = (e) => {\n    drawing = true;\n    current.x = e.clientX || e.touches[0].clientX;\n    current.y = e.clientY || e.touches[0].clientY;\n  };\n\n  const onMouseMove = (e) => {\n    if (!drawing) {\n      return;\n    }\n    drawLine(\n      current.x,\n      current.y,\n      e.clientX || e.touches[0].clientX,\n      e.clientY || e.touches[0].clientY\n    );\n    current.x = e.clientX || e.touches[0].clientX;\n    current.y = e.clientY || e.touches[0].clientY;\n  };\n\n  const onMouseUp = (e) => {\n    if (!drawing) {\n      return;\n    }\n    drawing = false;\n    drawLine(\n      current.x,\n      current.y,\n      e.clientX || e.touches[0].clientX,\n      e.clientY || e.touches[0].clientY\n    );\n  };\n\n  const throttle = (callback, delay) => {\n    let previousCall = new Date().getTime();\n    return function () {\n      const time = new Date().getTime();\n\n      if (time - previousCall >= delay) {\n        previousCall = time;\n        callback.apply(null, arguments);\n      }\n    };\n  };\n\n  const onResize = () => {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  };\n\n  const onColorUpdate = (e) => {\n    console.log(brush);\n    if (brush !== \"eraser\") {\n      current.color = e.target.dataset.color;\n    }\n  };\n\n  const onBrushChange = (e) => {\n    let brushType = e.target.dataset.brush;\n\n    switch (brushType) {\n      case \"pen\":\n        current.stroke = 1;\n        current.opacity = 1;\n        if (current.color === \"white\") current.color = \"black\";\n        setBrush(\"pen\");\n        break;\n      case \"highlighter\":\n        current.stroke = 5;\n        current.opacity = 0.5;\n        if (current.color === \"white\") current.color = \"black\";\n        setBrush(\"highlighter\");\n        break;\n      case \"eraser\":\n        current.stroke = 3;\n        current.color = \"white\";\n        current.opacity = 1;\n        setBrush(\"eraser\");\n        break;\n    }\n  };\n\n  const onBrushSizeChange = (e) => {\n    e.stopPropagation();\n    let brushSize = e.target.dataset.size;\n    switch (brushSize) {\n      case \"1\":\n        current.stroke = 1;\n        break;\n      case \"3\":\n        current.stroke = 3;\n        break;\n      case \"5\":\n        current.stroke = 5;\n        break;\n      case \"10\":\n        current.stroke = 10;\n        break;\n      case \"15\":\n        current.stroke = 15;\n        break;\n    }\n  };\n\n  const onClearCanvas = () => {\n    if(context) context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n\n  useEffect(() => {\n    canvas = canvasRef.current;\n    context = canvas.getContext(\"2d\");\n\n    canvas.addEventListener(\"mousedown\", onMouseDown);\n    canvas.addEventListener(\"mouseup\", onMouseUp);\n    canvas.addEventListener(\"mouseout\", onMouseUp);\n    canvas.addEventListener(\"mousemove\", throttle(onMouseMove, 10));\n    window.addEventListener(\"resize\", onResize);\n    onResize();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"toolbox\">\n        <div ref={colorsRef} className=\"colors\">\n          <div className=\"color black\" data-color=\"black\" onClick={onColorUpdate} />\n          <div className=\"color red\" data-color=\"red\" onClick={onColorUpdate} />\n          <div className=\"color green\" data-color=\"green\" onClick={onColorUpdate} />\n          <div className=\"color blue\" data-color=\"blue\" onClick={onColorUpdate} />\n          <div className=\"color yellow\" data-color=\"yellow\" onClick={onColorUpdate} />\n        </div>\n        <div className=\"brushes\">\n          <div\n            className={`brush ${brush === \"pen\" ? \"selected\" : \"\"}`}\n            data-brush=\"pen\"\n            onClick={onBrushChange}\n          >\n            Pen\n            {brush === \"pen\" && (\n              <div className=\"brush-palatte\">\n                <div\n                  className=\"brush-size brush-size-1\"\n                  data-size=\"1\"\n                  onClick={onBrushSizeChange}\n                ></div>\n                <div\n                  className=\"brush-size brush-size-3\"\n                  data-size=\"3\"\n                  onClick={onBrushSizeChange}\n                ></div>\n                <div\n                  className=\"brush-size brush-size-5\"\n                  data-size=\"5\"\n                  onClick={onBrushSizeChange}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            className={`brush ${brush === \"highlighter\" ? \"selected\" : \"\"}`}\n            data-brush=\"highlighter\"\n            onClick={onBrushChange}\n          >\n            Highlighter\n            {brush === \"highlighter\" && (\n              <div className=\"brush-palatte\">\n                <div\n                  className=\"brush-size brush-size-1\"\n                  data-size=\"5\"\n                  onClick={onBrushSizeChange}\n                ></div>\n                <div\n                  className=\"brush-size brush-size-3\"\n                  data-size=\"10\"\n                  onClick={onBrushSizeChange}\n                ></div>\n                <div\n                  className=\"brush-size brush-size-5\"\n                  data-size=\"15\"\n                  onClick={onBrushSizeChange}\n                ></div>\n              </div>\n            )}\n          </div>\n          <div\n            className={`brush ${brush === \"eraser\" ? \"selected\" : \"\"}`}\n            data-brush=\"eraser\"\n            onClick={onBrushChange}\n          >\n            Eraser\n            {brush === \"eraser\" && (\n              <div className=\"brush-palatte\">\n                <div\n                  className=\"brush-size brush-size-1\"\n                  data-size=\"5\"\n                  onClick={onBrushSizeChange}\n                ></div>\n                <div\n                  className=\"brush-size brush-size-3\"\n                  data-size=\"10\"\n                  onClick={onBrushSizeChange}\n                ></div>\n                <div\n                  className=\"brush-size brush-size-5\"\n                  data-size=\"15\"\n                  onClick={onBrushSizeChange}\n                ></div>\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"clear-all\" onClick={onClearCanvas}>Clear All</div>\n      </div>\n      <canvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}